When would you want to use a remote repository rather than keeping all your work
local?

   First of all when sharing my repo with other people. And when using multiples 
   computers even if is myself just the one contributing.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Most of the time I think I prefer when to commit but, when I'm the only one
	contributing to the repository, could be usefull to have the local updated 
	automatically.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks is like a clone but just within projects in GitHub. 
	Clones makes a copy of a remote repository in local or a local repository in 
	other local directory
	And branch just tags a commit and enables to advance in parallel from one point.
	
	You should use clone whenever the repository is local or you are making one 
	repo local. 
	Fork just within GitHub
	And Branch for separate different lines of development but maintaining the 
	reference to one point. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    When you have no Internet Access you can still guess how you have differed 
	from the original repository. 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Colaborating with GitHub seems the best option for big projects with many 
	colaborators that have different permissions for colaborate. And many times
	they are not much regulate collaborators.
	Git is more direct method and similar to other version control systems used
	in my project
	

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

	I am supproter of working in branches for everything. One branch for person 
	and functionality, if multiple people are workin in the same functionality 
	I think all shoudl work in different branches and then merge on one branch 
	different from master and when the funtionality is tested and aproved then
	merged into master. 
	
	So I think working in branches is the best approach for colaborative projects
	even if it could be a bit slower than having no branches or less number of them
	